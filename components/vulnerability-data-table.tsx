"use client";

import React, { useState, useMemo, useRef, useEffect, useCallback } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Minimize2,
  Maximize2,
  Search,
  SlidersHorizontal,
  ArrowUpDown,
  ExternalLink,
  FlaskConical,
  CloudHail,
} from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";

interface NodeDetails {
  Node_ID: string;
  Vulnerability_Category: string;
  Vulnerability_Rank: number;
  Cluster: number;
  Cluster_Score: number;
  YR: number;
  Time_Before_Overflow: number;
  Hours_Flooded: number;
  Maximum_Rate: number;
  Time_Of_Max_Occurence: number;
  Total_Flood_Volume: number;
}

type SortField = keyof NodeDetails;
type SortDirection = "asc" | "desc";

interface VulnerabilityDataTableProps {
  data: NodeDetails[];
  isMinimized: boolean;
  onToggleMinimize: () => void;
  position?: { x: number; y: number };
  onPositionChange?: (position: { x: number; y: number }) => void;
  onHighlightNodes?: (nodeIds: Set<string>) => void;
  onOpenNodeSimulation?: (nodeId: string) => void;
}

const COLUMN_LABELS: Record<keyof NodeDetails, string> = {
  Node_ID: "Node ID",
  Vulnerability_Category: "Vulnerability",
  Vulnerability_Rank: "Vulnerability Rank",
  Cluster: "Cluster Type",
  Cluster_Score: "Cluster Score",
  YR: "Year Return",
  Time_Before_Overflow: "TBO (min)",
  Hours_Flooded: "Hours Flooded",
  Maximum_Rate: "Max Rate (CMS)",
  Time_Of_Max_Occurence: "Time of Max",
  Total_Flood_Volume: "Flood Volume ",
};

// Columns that can be hidden (all except Node_ID)
const OPTIONAL_COLUMNS: (keyof NodeDetails)[] = [
  "Vulnerability_Category",
  "Vulnerability_Rank",
  "Cluster",
  "Cluster_Score",
  "YR",
  "Time_Before_Overflow",
  "Hours_Flooded",
  "Maximum_Rate",
  "Time_Of_Max_Occurence",
  "Total_Flood_Volume",
];

export function VulnerabilityDataTable({
  data,
  isMinimized,
  onToggleMinimize,
  position,
  onPositionChange,
  onHighlightNodes,
  onOpenNodeSimulation,
}: VulnerabilityDataTableProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState<SortField | null>(null);
  const [sortDirection, setSortDirection] = useState<SortDirection>("asc");
  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());
  const [isDragging, setIsDragging] = useState(false);
  const dragRef = useRef<{
    startX: number;
    startY: number;
    startPosX: number;
    startPosY: number;
  } | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // Default visible columns: Node_ID, Vulnerability_Category, Total_Flood_Volume
  const [visibleColumns, setVisibleColumns] = useState<(keyof NodeDetails)[]>([
    "Node_ID",
    "Vulnerability_Category",
    "Total_Flood_Volume",
  ]);

  // Handle column visibility toggle
  const handleColumnToggle = (column: keyof NodeDetails) => {
    setVisibleColumns((prev) => {
      if (prev.includes(column)) {
        // Don't allow removing Node_ID or going below 3 columns
        if (column === "Node_ID" || prev.length <= 3) return prev;
        return prev.filter((col) => col !== column);
      } else {
        // Don't allow more than 3 columns
        if (prev.length >= 3) {
          // FIFO: Remove the first non-Node_ID column (oldest), add new column at end
          const newColumns = [...prev];
          const firstNonNodeIdIndex = newColumns.findIndex(
            (col) => col !== "Node_ID"
          );
          if (firstNonNodeIdIndex !== -1) {
            newColumns.splice(firstNonNodeIdIndex, 1);
          }
          return [...newColumns, column];
        }
        return [...prev, column];
      }
    });
  };

  // Handle sorting
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("asc");
    }
  };

  // Filter and sort data
  const processedData = useMemo(() => {
    let filtered = data;

    // Apply search filter
    if (searchQuery) {
      filtered = filtered.filter((row) =>
        Object.entries(row).some(([key, value]) =>
          String(value).toLowerCase().includes(searchQuery.toLowerCase())
        )
      );
    }

    // Apply sorting
    if (sortField) {
      filtered = [...filtered].sort((a, b) => {
        const aVal = a[sortField];
        const bVal = b[sortField];

        if (typeof aVal === "string" && typeof bVal === "string") {
          return sortDirection === "asc"
            ? aVal.localeCompare(bVal)
            : bVal.localeCompare(aVal);
        }

        if (typeof aVal === "number" && typeof bVal === "number") {
          return sortDirection === "asc" ? aVal - bVal : bVal - aVal;
        }

        return 0;
      });
    }

    return filtered;
  }, [data, searchQuery, sortField, sortDirection]);

  // Handle row selection
  const handleSelectAll = () => {
    if (selectedRows.size === processedData.length) {
      const emptySet = new Set<string>();
      setSelectedRows(emptySet);
      onHighlightNodes?.(emptySet);
    } else {
      const allIds = new Set(processedData.map((row) => row.Node_ID));
      setSelectedRows(allIds);
      onHighlightNodes?.(allIds);
    }
  };

  const handleSelectRow = (nodeId: string) => {
    const newSelected = new Set(selectedRows);
    if (newSelected.has(nodeId)) {
      newSelected.delete(nodeId);
    } else {
      newSelected.add(nodeId);
    }
    setSelectedRows(newSelected);
    onHighlightNodes?.(newSelected);
  };

  // Drag handlers
  const handleMouseDown = (e: React.MouseEvent) => {
    // Don't start dragging when interacting with inputs, buttons, selects, textareas, or elements marked .no-drag
    const target = e.target as HTMLElement | null;
    if (
      target &&
      target.closest &&
      target.closest(
        'input, textarea, select, button, [role="button"], [role="textbox"], .no-drag'
      )
    ) {
      return;
    }

    if (!position || !onPositionChange) return;
    setIsDragging(true);
    dragRef.current = {
      startX: e.clientX,
      startY: e.clientY,
      startPosX: position.x,
      startPosY: position.y,
    };
    e.preventDefault();
  };

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isDragging || !dragRef.current || !onPositionChange) return;

    const deltaX = e.clientX - dragRef.current.startX;
    const deltaY = e.clientY - dragRef.current.startY;

    onPositionChange({
      x: dragRef.current.startPosX + deltaX,
      y: dragRef.current.startPosY + deltaY,
    });
  }, [isDragging, onPositionChange]);

  const handleMouseUp = () => {
    setIsDragging(false);
    dragRef.current = null;
  };

  // Touch handlers for mobile
  const handleTouchStart = (e: React.TouchEvent) => {
    // Ignore touches that start on interactive controls
    const target = e.target as HTMLElement | null;
    if (
      target &&
      target.closest &&
      target.closest(
        'input, textarea, select, button, [role="button"], [role="textbox"], .no-drag'
      )
    ) {
      return;
    }

    if (!position || !onPositionChange) return;
    const touch = e.touches[0];
    setIsDragging(true);
    dragRef.current = {
      startX: touch.clientX,
      startY: touch.clientY,
      startPosX: position.x,
      startPosY: position.y,
    };
  };

  const handleTouchMove = useCallback((e: TouchEvent) => {
    if (!isDragging || !dragRef.current || !onPositionChange) return;

    const touch = e.touches[0];
    const deltaX = touch.clientX - dragRef.current.startX;
    const deltaY = touch.clientY - dragRef.current.startY;

    onPositionChange({
      x: dragRef.current.startPosX + deltaX,
      y: dragRef.current.startPosY + deltaY,
    });
  }, [isDragging, onPositionChange]);

  const handleTouchEnd = () => {
    setIsDragging(false);
    dragRef.current = null;
  };

  // Add event listeners
  useEffect(() => {
    if (isDragging) {
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
      document.addEventListener("touchmove", handleTouchMove);
      document.addEventListener("touchend", handleTouchEnd);

      return () => {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
        document.removeEventListener("touchmove", handleTouchMove);
        document.removeEventListener("touchend", handleTouchEnd);
      };
    }
  }, [isDragging, handleMouseMove, handleTouchMove]);

  // While dragging, prevent page scrolling / scrollbars (and touch scrolling)
  useEffect(() => {
    const prevHtmlOverflow = document.documentElement.style.overflow;
    const prevBodyOverflow = document.body.style.overflow;
    const prevHtmlTouch = document.documentElement.style.touchAction;

    if (isDragging) {
      document.documentElement.style.overflow = "hidden";
      document.body.style.overflow = "hidden";
      // disable touch scrolling while dragging on mobile
      document.documentElement.style.touchAction = "none";
    }

    return () => {
      // restore previous values
      document.documentElement.style.overflow = prevHtmlOverflow;
      document.body.style.overflow = prevBodyOverflow;
      document.documentElement.style.touchAction = prevHtmlTouch;
    };
  }, [isDragging]);

  // Clear highlights when component unmounts
  useEffect(() => {
    return () => {
      onHighlightNodes?.(new Set());
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div
      ref={containerRef}
      className="flex flex-col border bg-background rounded-lg shadow-lg"
      style={{
        maxHeight: isMinimized ? "auto" : "calc(100vh - 120px)",
        minWidth: "500px",
        maxWidth: "900px",
      }}
    >
      {/* Header */}
      <div
        className={cn(
          "flex items-center justify-between gap-2 p-3 border-b rounded-t-lg bg-muted/50",
          position && onPositionChange && "cursor-grab active:cursor-grabbing",
          isDragging && "cursor-grabbing select-none"
        )}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
      >
        {!isMinimized ? (
          <>
            {/* Left: Search Input */}
            <div
              className="relative w-3xs bg-white rounded-2xl"
              onClick={(e) => e.stopPropagation()}
            >
              <Search className="absolute left-3.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-9 w-3xs no-drag rounded-2xl"
              />
            </div>

            {/* Right: Columns and Minimize buttons */}
            <div
              className="flex items-center gap-2"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Column Visibility Dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-9">
                    <SlidersHorizontal className="h-4 w-4 mr-2" />
                    Columns
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[200px]">
                  <DropdownMenuLabel>Toggle Columns</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuCheckboxItem
                    checked={true}
                    disabled={true}
                    className="cursor-not-allowed"
                  >
                    {COLUMN_LABELS.Node_ID}
                  </DropdownMenuCheckboxItem>
                  {OPTIONAL_COLUMNS.map((column) => (
                    <DropdownMenuCheckboxItem
                      key={column}
                      checked={visibleColumns.includes(column)}
                      onCheckedChange={() => handleColumnToggle(column)}
                      disabled={
                        visibleColumns.includes(column) &&
                        visibleColumns.length <= 3
                      }
                    >
                      {COLUMN_LABELS[column]}
                    </DropdownMenuCheckboxItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>

              {/* Minimize Button */}
              <Button
                variant="outline"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  onToggleMinimize();
                }}
                className="h-9"
                aria-label="Minimize table"
              >
                <Minimize2 className="h-4 w-4" />
              </Button>
            </div>
          </>
        ) : (
          <Button
            variant="outline"
            size="sm"
            onClick={(e) => {
              e.stopPropagation();
              onToggleMinimize();
            }}
            className="h-9 ml-auto"
          >
            <Maximize2 className="h-4 w-4 mr-2" />
            Expand Table
          </Button>
        )}
      </div>

      {/* Table Content */}
      {!isMinimized && (
        // increased bottom padding and custom-scrollbar class to avoid rounded-corner overlap,
        // plus CSS below reduces the right padding of the last column to compensate for scrollbar width
        <div className="flex-1 overflow-auto custom-scrollbar">
          <Table>
            <TableHeader>
              <TableRow>
                {/* Checkbox Column Header */}
                <TableHead className="w-14 pl-5">
                  <Checkbox
                    checked={
                      selectedRows.size === processedData.length &&
                      processedData.length > 0
                    }
                    onCheckedChange={handleSelectAll}
                    aria-label="Select all"
                  />
                </TableHead>
                {visibleColumns.map((column) => (
                  <TableHead
                    key={column}
                    className="cursor-pointer select-none hover:bg-muted/50 min-w-[150px]"
                    onClick={() => handleSort(column)}
                  >
                    <div className="flex items-center">
                      {COLUMN_LABELS[column]}
                    </div>
                  </TableHead>
                ))}
                {/* Simulate action column */}
                <TableHead className="w-10 flex items-center p-0">
                  <CloudHail className="h-4 w-4" />
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {processedData.length === 0 ? (
                <TableRow>
                  <TableCell
                    colSpan={visibleColumns.length + 2}
                    className="text-center text-muted-foreground h-24"
                  >
                    No data found
                  </TableCell>
                </TableRow>
              ) : (
                processedData.map((row, index) => (
                  <TableRow key={`${row.Node_ID}-${index}`}>
                    {/* Checkbox Column */}
                    <TableCell className="w-14 pl-5">
                      <Checkbox
                        checked={selectedRows.has(row.Node_ID)}
                        onCheckedChange={() => handleSelectRow(row.Node_ID)}
                        aria-label={`Select row ${row.Node_ID}`}
                      />
                    </TableCell>
                    {visibleColumns.map((column) => (
                      <TableCell key={column} className="pr-10">
                        {typeof row[column] === "number"
                          ? row[column].toLocaleString()
                          : row[column]}
                      </TableCell>
                    ))}
                    {/* Simulate icon cell (small, minimal padding to avoid increasing row height) */}
                    <TableCell className="p-0">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="p-1 size-4"
                        onClick={() => onOpenNodeSimulation?.(row.Node_ID)}
                        aria-label={`Open ${row.Node_ID} simulation`}
                      >
                        <ExternalLink />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
      )}

      {/* Custom scrollbar styles and extra spacing to avoid rounded corner overlap */}
      <style>{`
        .custom-scrollbar {
          /* Firefox */
          scrollbar-width: thin;
          scrollbar-color: rgba(107,114,128,0.6) transparent;
        }
        /* WebKit browsers */
        .custom-scrollbar::-webkit-scrollbar {
          width: 10px;
          height: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(107,114,128,0.6);
          border-radius: 9999px;
          border: 3px solid transparent; /* keeps thumb visually away from edges */
          background-clip: padding-box;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: transparent;
        }

        /* Keep last column compact and vertically centered */
        .custom-scrollbar th:last-child,
        .custom-scrollbar td:last-child {
          padding: 0 4px !important;
          min-width: 50px;
          vertical-align: middle;
        }

        /* Slightly reduce default right padding on all cells so table fits better */
        .custom-scrollbar th,
        .custom-scrollbar td {
          padding-right: 8px;
        }
      `}</style>
    </div>
  );
}
